-- week 5 Notes
use sakila;
-- Learning Objectives:
-- Learn how to understand the intersection of sets.
-- ** intersect removes all duplicates, while intersect all does not

-- Learn how to understand the left and right complements of the join of two sets, which are those results outside of the intersection.
-- Learn how to understand the symmetrical difference, or additive result of the left and right complements in a join of two sets.
-- Reading Assignment:
-- Read Learning SQL, Chapter 6—Working with Sets [PowerPoint Slides  download].
-- ** A union B, A intersect B, A except B, and others like ->(A union B) except (A intersect B)
-- **  dictate the order in which queries are combined by enclosing multiple queries in parentheses
-- MySQL UNION (Links to an external site.) Tutorial Web Page
-- Tasks:
-- Read the chapters listed below and the slides, then take the 2 question quiz that asks:

-- Did you read Learning SQL, Chapter 6—Working with Sets?
-- Did you read Learning SQL, Chapter 6—Slides?
-- Reading Objectives:
-- Learn how to use the union operator.
--  **union and union all operators allow you to combine multiple data sets. The difference is that UNION deletes duplicates and 
--  sorts the data. With union all, the number of rows in the final data set will always equal the sum of the number of rows 
--  in the sets being combined. 
-- Learn how to use the intersect operator.
--  ** intersect operator to have precedence over the other set operators.
-- Learn how to use the except operator.
-- Learn how to use set operators in combination to discover the symmetrical difference between sets in joins.

-- Exercise 6-1
-- If set A = {L M N O P} and set B = {P Q R S T}, what sets are generated by the following operations?

-- A union B
-- ANSWER: L M N O P Q R S T
-- A union all B
-- ANSWER: L M N O P P Q R S T
-- A intersect B
-- ANSWER: P
-- A except B
-- ANSWER: L M N O

-- Exercise 6-2
-- Write a compound query that finds the first and last names of all actors and customers whose last name starts with L.
select a.first_name, a.last_name from actor a 
where a.last_name like 'L%'
union 
select c.first_name, c.last_name from customer c
where c.last_name like 'L%';

-- Exercise 6-3
-- Sort the results from Exercise 6-2 by the last_name column.

select a.first_name, a.last_name from actor a 
where a.last_name like 'L%'
union 
select c.first_name, c.last_name from customer c
where c.last_name like 'L%'
order by last_name;


-- notes
SELECT 'CUST' typ, c.first_name fname, c.last_name lname
FROM customer c
WHERE c.first_name LIKE 'J%' AND c.last_name LIKE 'D%'
UNION ALL
SELECT 'ACTR' typ, a.first_name, a.last_name
FROM actor a
WHERE a.first_name LIKE 'J%' AND a.last_name LIKE 'D%'
ORDER BY lname, fname;

SELECT c.first_name fname, c.last_name lname
FROM customer c
WHERE c.first_name LIKE 'J%' AND c.last_name LIKE 'D%'
UNION -- in order to remove duplicates, remove the lable column (this makes the row able to remove ones that are the same)
SELECT a.first_name, a.last_name
FROM actor a
WHERE a.first_name LIKE 'J%' AND a.last_name LIKE 'D%'
ORDER BY lname, fname;
-- Bro Crook's example to remove the others without the except, intersect, or minus would return only Jennifer Davis
Select 
Cust.last_name
, cust.first_name
From
(Select last_name, first_name
From customer) as cust 
CROSS JOIN
(Select last_name, first_name 
From actor) as act
WHERE cust.last_name = act.last_name
AND cust.first_name=act.first_name;

SELECT 1 num, 'one' str
     UNION ALL
     SELECT 2 num, 'two' str
     UNION ALL
     SELECT 3 num, 'three' str
     UNION ALL
     SELECT 2 num, 'two' str
    ORDER BY 1, 2;
use sakila;
 SELECT first_name
     ,      last_name
     FROM   customer
     WHERE  last_name LIKE 'D%';
     
     
     SELECT first_name
     ,      last_name
     FROM   customer
     WHERE  last_name LIKE 'DI%';
     
     SELECT first_name
     ,      last_name
     FROM   customer
     WHERE  last_name LIKE 'D%'
     AND   (first_name,last_name) NOT IN
         (SELECT first_name
              ,      last_name
              FROM   customer
              WHERE  last_name LIKE 'DI%') order by last_name asc;
              
              
 SELECT 1 num, 'one' str
    UNION
     SELECT 2 num, 'two' str
     UNION
     SELECT 3 num, 'three' str
     UNION
     SELECT 2 num, 'two' str;              